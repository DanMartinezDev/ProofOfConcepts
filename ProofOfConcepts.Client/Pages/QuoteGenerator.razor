@using ProofOfConcepts.Scriban;
@using ProofOfConcepts.Scriban.Models;
@using System.Web;
@inject IJSRuntime JS

@page "/quotegenerator"

<PageTitle>Quote Generator</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large">
    <MudGrid Spacing="12" Class="mt-1">
        <MudItem xs="6">
            <MudPaper>
                <MudGrid Class="d-flex align-center pa-3">
                    <MudItem xs="12">                        
                        <MudText Typo="Typo.h4">
                            How Does it work?
                        </MudText>
                        <MudText Class="mb-2">
                            Using Scriban to parse html and models to generate html/css/js.
                        </MudText>
                        <MudText Class="mb-2">
                            Then the service returns generated content to iframe to display.
                        </MudText>
                        <MudText Class="mb-2">
                            When downloading Scriban generates the html/css/js and uses PuppeteerSharp to convert it to a pdf.
                        </MudText>
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField @bind-Value="discount"
                                         HideSpinButtons="true"
                                         Format="N2"
                                         Immediate="true"
                                         Variant="Variant.Outlined"
                                         InvertMouseWheel="false"
                                         Min="0"
                                         Max="100"
                                         Step="5"
                                         Label="Discount % (Shift + Mouse Wheel)" />
                    </MudItem>
                    <MudItem>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="GenerateQuote">Generate Quote</MudButton>
                        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Outlined" OnClick="DownloadPdfWithBlazor">Download</MudButton>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>
        <MudItem xs="6">
            <MudGrid>
                <MudPaper>
                    <MudItem Class="pa-5">
                        <div id="quote-container">
                            <iframe id="quoteIframe" srcdoc="@template" />
                        </div>
                    </MudItem>
                </MudPaper>
            </MudGrid>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    string template = string.Empty;
    decimal discount = 0;

    protected override void OnInitialized()
    {
        GenerateQuote();

        base.OnInitialized();
    }

    private Dictionary<string, object> GetQuote()
    {
        var quoteModel = new QuoteModel();
        quoteModel.DiscountPercent = discount;
        quoteModel.LineItems.Add(new LineItem("A sweet motorcycle", 1, 8000));
        quoteModel.LineItems.Add(new LineItem("An awesome computer", 1, 4000));
        quoteModel.LineItems.Add(new LineItem("A cool gaming chair", 1, 2000));

        var quoteFooterModel = new QuoteFooterModel();
        quoteFooterModel.Signed = "Dan Martinez";

        var templateModels = new Dictionary<string, object>();
        templateModels.Add("Model", quoteModel);
        templateModels.Add("QuoteFooter", quoteFooterModel);

        return templateModels;
    }

    private void GenerateQuote()
    {
        template = new ScribanService().RenderTemplate(GetQuote(), ScribanTemplates.Quote);
    }

    private async Task DownloadPdfWithBlazor()
    {
        var file = await new ScribanService().RenderTemplateAsPdf(GetQuote(), ScribanTemplates.Quote);
        await JS.InvokeVoidAsync("BlazorDownloadFile", "your_pdf_quote.pdf", "application/octet-stream", file);
    }
}

<script>
    // I really don't like how blazor handles downloads.
    // I had to find this method in a SO thread.
    function BlazorDownloadFile(filename, contentType, data) {
        const file = new File([data], filename, { type: contentType });
        const exportUrl = URL.createObjectURL(file);

        const a = document.createElement("a");
        document.body.appendChild(a);
        a.href = exportUrl;
        a.download = filename;
        a.target = "_self";
        a.click();

        URL.revokeObjectURL(exportUrl);
        a.remove();
    }
</script>

<style scoped>
    #quote-container {
        background-color: white;
        width: 478px;
        height: 618px;
        box-shadow: rgba(0, 0, 0, 0.3) 0px 19px 38px, rgba(0, 0, 0, 0.22) 12px 12px 12px;
    }
</style>

